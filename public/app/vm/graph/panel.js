// Generated by CoffeeScript 1.6.2
(function() {
  define(["app/dataProvider"], function(dataProvider) {
    var Panel;

    return Panel = (function() {
      function Panel() {
        var _this = this;

        this.name_src = ko.observable();
        this.name_tgt = ko.observable();
        this.url_src = ko.computed(function() {
          return "https://www.google.ru/search?q=" + (_this.name_src());
        });
        this.url_tgt = ko.computed(function() {
          return "https://www.google.ru/search?q=" + (_this.name_tgt());
        });
        this.tags = ko.observableArray();
      }

      Panel.prototype.load = function(filter, done) {
        return dataProvider.get("graphs", {
          contrib: "518b989739ed9714289d0bc1"
        }, function(err, data) {
          var edge, node, pos, _i, _j, _len, _len1, _ref, _ref1;

          if (!err) {
            _ref = data.edges;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              edge = _ref[_i];
              edge.target = data.nodes.filter(function(n) {
                return n.id === edge.target_id;
              })[0];
              edge.source = data.nodes.filter(function(n) {
                return n.id === edge.source_id;
              })[0];
            }
            _ref1 = data.nodes;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              node = _ref1[_j];
              pos = node.meta.pos;
              if (pos[0] === -1) {
                pos[0] = 100;
              }
              if (pos[1] === -1) {
                pos[1] = 100;
              }
            }
          }
          return done(err, data);
        });
      };

      Panel.prototype.render = function(data) {
        var color, grp_edges, grp_nodes, link, node, svg, text,
          _this = this;

        this.data = data;
        color = d3.scale.category20();
        grp_nodes = data.nodes;
        grp_edges = data.edges;
        /*
        xscale = d3.scale.linear()
          .domain([d3.min(grp_nodes, (d) -> d.meta.pos[0]), d3.max(grp_nodes, (d) -> d.meta.pos[0])]).range([400, 900])
        yscale = d3.scale.linear()
          .domain([d3.min(grp_nodes, (d) -> d.meta.pos[1]), d3.max(grp_nodes, (d) -> d.meta.pos[1])]).range([200, 500])
        */

        svg = d3.select("#graph").append("svg").attr("height", 900);
        link = svg.selectAll("link").data(grp_edges).enter().append("line").classed("link", true).classed("family_rel", function(d) {
          return d.tags.filter(function(t) {
            return t.type === "family";
          }).length;
        }).classed("private_rel", function(d) {
          return d.tags.filter(function(t) {
            return t.type === "private";
          }).length;
        }).classed("prof_rel", function(d) {
          return d.tags.filter(function(t) {
            return t.type === "prof";
          }).length;
        }).attr("x1", function(d) {
          return d.source.meta.pos[0];
        }).attr("y1", function(d) {
          return d.source.meta.pos[1];
        }).attr("x2", function(d) {
          return d.target.meta.pos[0];
        }).attr("y2", function(d) {
          return d.target.meta.pos[1];
        }).on("mouseover", function(d) {
          _this.name_src(d.source.name);
          _this.name_tgt(d.target.name);
          return _this.tags(d.tags);
        });
        text = svg.selectAll("text").data(grp_nodes).enter().append("text").attr("class", "text").attr("text-anchor", "middle").text(function(d) {
          return d.name;
        }).attr("x", function(d) {
          return d.meta.pos[0];
        }).attr("y", function(d) {
          return d.meta.pos[1] - 10;
        });
        return node = svg.selectAll("node").data(grp_nodes).enter().append("circle").attr("r", 5).attr("class", "node").attr("cx", function(d) {
          return d.meta.pos[0];
        }).attr("cy", function(d) {
          return d.meta.pos[1];
        }).call(d3.behavior.drag().origin(function(d) {
          return d;
        }).on("drag", function(d) {
          var x, y;

          x = parseFloat(d3.select(this).attr("cx")) + d3.event.dx;
          y = parseFloat(d3.select(this).attr("cy")) + d3.event.dy;
          d3.select(this).attr("cx", x).attr("cy", y);
          link.filter(function(l) {
            return l.source === d;
          }).attr("x1", x).attr("y1", y);
          link.filter(function(l) {
            return l.target === d;
          }).attr("x2", x).attr("y2", y);
          text.filter(function(t) {
            return t.id === d.id;
          }).attr("x", x).attr("y", y - 10);
          d.meta.pos = [x, y];
          return console.log(d.meta.pos);
        }));
      };

      Panel.prototype.toData = function() {
        return {
          contrib: "518b989739ed9714289d0bc1",
          data: this.data.nodes
        };
      };

      return Panel;

    })();
  });

}).call(this);
