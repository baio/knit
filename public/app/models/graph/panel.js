// Generated by CoffeeScript 1.6.2
(function() {
  define(["app/config"], function(config) {
    var Panel;

    Panel = (function() {
      function Panel() {}

      Panel.prototype.load = function(done) {
        return d3.xml(config.links.panel_gexf_url, "application/xml", function(gexf) {
          var edges, grp_edges, grp_nodes, nodes;

          console.log(gexf);
          nodes = d3.select(gexf).selectAll("node")[0];
          edges = d3.select(gexf).selectAll("edge")[0];
          grp_nodes = nodes.map(function(d) {
            var cn, position, _i, _len, _ref;

            _ref = d.childNodes;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              cn = _ref[_i];
              if (cn.localName === "position") {
                position = cn;
                break;
              }
            }
            return {
              attrs: {
                id: d.attributes.id.value,
                label: d.attributes.label.value,
                x: position.attributes.x.value,
                y: position.attributes.y.value
              }
            };
          });
          grp_edges = edges.map(function(d) {
            var attrs, cn, fr, _i, _len, _ref;

            attrs = {};
            _ref = d.childNodes[1].childNodes;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              cn = _ref[_i];
              if (cn.attributes) {
                fr = d3.select(cn).attr("for");
                if (fr === "family_rel" || fr === "private_rel" || fr === "prof_rel" || fr === "link") {
                  attrs[fr] = d3.select(cn).attr("value");
                }
              }
            }
            return {
              attrs: attrs,
              source: grp_nodes.filter(function(f) {
                return d3.select(d).attr("source") === f.attrs.id;
              })[0],
              target: grp_nodes.filter(function(f) {
                return d3.select(d).attr("target") === f.attrs.id;
              })[0],
              weight: 1
            };
          });
          return done(null, {
            nodes: grp_nodes,
            edges: grp_edges
          });
        });
      };

      Panel.prototype.render = function(model) {
        var color, grp_edges, grp_nodes, link, node, svg, text, xscale, yscale;

        color = d3.scale.category20();
        grp_nodes = model.nodes;
        grp_edges = model.edges;
        xscale = d3.scale.linear().domain([
          d3.min(grp_nodes, function(d) {
            return d.attrs.x;
          }), d3.max(grp_nodes, function(d) {
            return d.attrs.x;
          })
        ]).range([400, 900]);
        yscale = d3.scale.linear().domain([
          d3.min(grp_nodes, function(d) {
            return d.attrs.y;
          }), d3.max(grp_nodes, function(d) {
            return d.attrs.y;
          })
        ]).range([200, 500]);
        svg = d3.select("#graph").append("svg").attr("height", 900);
        link = svg.selectAll("link").data(grp_edges).enter().append("line").classed("link", true).classed("family_rel", function(d) {
          return d.attrs.family_rel;
        }).classed("private_rel", function(d) {
          return !d.attrs.family_rel && d.attrs.private_rel;
        }).classed("prof_rel", function(d) {
          return !(d.attrs.family_rel || d.attrs.private_rel) && d.attrs.prof_rel;
        }).attr("x1", function(d) {
          return xscale(d.source.attrs.x);
        }).attr("y1", function(d) {
          return yscale(d.source.attrs.y);
        }).attr("x2", function(d) {
          return xscale(d.target.attrs.x);
        }).attr("y2", function(d) {
          return yscale(d.target.attrs.y);
        });
        node = svg.selectAll("node").data(grp_nodes).enter().append("circle").attr("r", 5).attr("class", "node").attr("cx", function(d) {
          return xscale(d.attrs.x);
        }).attr("cy", function(d) {
          return yscale(d.attrs.y);
        });
        return text = svg.selectAll("text").data(grp_nodes).enter().append("text").attr("class", "text").attr("text-anchor", "middle").text(function(d) {
          return d.attrs.label;
        }).attr("x", function(d) {
          return xscale(d.attrs.x);
        }).attr("y", function(d) {
          return yscale(d.attrs.y - 10);
        });
      };

      return Panel;

    })();
    return {
      Panel: Panel
    };
  });

}).call(this);
