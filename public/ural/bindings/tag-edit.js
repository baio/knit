// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty;

  define(function() {
    var gOpts, _filterFields, _filterParams;

    gOpts = {
      baseUrl: null,
      data: {
        term: "Trem"
      },
      fields: {
        label: function(d) {
          if (d.FullName) {
            return d.FullName;
          } else {
            return d.Name;
          }
        },
        value: "Name",
        key: "Id"
      }
    };
    _filterFields = function(viewModel, fields) {
      var data, field;

      data = {};
      for (field in fields) {
        if (!__hasProp.call(fields, field)) continue;
        data[field] = viewModel[fields[field]]();
      }
      return data;
    };
    _filterParams = function(filterParams) {
      var data, field;

      data = {};
      for (field in filterParams) {
        if (!__hasProp.call(filterParams, field)) continue;
        data[field] = filterParams[field]();
      }
      return data;
    };
    ko.bindingHandlers.tagedit = {
      init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
        var gopts, opts, _data;

        gopts = gOpts;
        opts = allBindingsAccessor().tageditOpts;
        gopts = $.extend(gopts, opts);
        _data = [];
        return $(element).tagit({
          tagSource: function(req, res) {
            var data;

            data = {};
            data[gopts.data.term] = req.term;
            if (opts.filterFields) {
              data = $.extend(false, data, _filterFields(viewModel, opts.filterFields));
            }
            if (opts.filterParams) {
              data = $.extend(false, data, _filterParams(opts.filterParams));
            }
            return $.ajax({
              url: gopts.baseUrl + opts.url,
              data: data,
              dataType: "json",
              success: function(data) {
                var m;

                m = data.map(function(d) {
                  return {
                    data: d,
                    label: $.isFunction(gopts.fields.label) ? gopts.fields.label(d) : d[gopts.fields.label],
                    value: $.isFunction(gopts.fields.value) ? gopts.fields.value(d) : d[gopts.fields.value],
                    key: $.isFunction(gopts.fields.key) ? gopts.fields.key(d) : d[gopts.fields.key]
                  };
                });
                _data = m;
                return res(m);
              },
              minLength: 2
            });
          },
          afterTagAdded: function(event, ui) {
            var d;

            d = _data.filter(function(f) {
              return f.value === ui.tagLabel;
            })[0];
            if (!d) {
              if (gopts.getDefault) {
                d = gopts.getDefault(ui.tagLabel);
              } else {
                d = ui.tagLabel;
              }
            }
            if (gopts.toData) {
              d = gopts.toData(d);
            }
            valueAccessor().push(d);
            return console.log(d);
          }
        });
      },
      update: function(element, valueAccessor, allBindingsAccessor) {}
    };
    return gOpts;
  });

}).call(this);

/*
//@ sourceMappingURL=tag-edit.map
*/
